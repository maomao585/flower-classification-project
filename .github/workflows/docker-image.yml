name: Docker Image CI

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev, staging ]
  workflow_dispatch:

jobs:
  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Create env file for staging
      if: github.ref == 'refs/heads/staging'
      run: echo "${{ secrets.STAGING_ENV }}" > .env
    - name: Create env file for production
      if: github.ref == 'refs/heads/main'
      run: echo "${{ secrets.PROD_ENV }}" > .env
    - name: Build Docker image
      run: docker build -t flower-classification:latest .
    - name: Configure MLflow to DagsHub
      if: ${{ secrets.DAGSHUB_USERNAME != '' && secrets.DAGSHUB_TOKEN != '' }}
      env:
        DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
        DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
      run: |
        echo "MLFLOW_TRACKING_URI=https://dagshub.com/${{ secrets.DAGSHUB_USERNAME }}/flower-classification-project.mlflow" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_USERNAME=${{ secrets.DAGSHUB_USERNAME }}" >> $GITHUB_ENV
        echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.DAGSHUB_TOKEN }}" >> $GITHUB_ENV
    - name: Test Docker image (healthcheck)
      run: |
        set -e
        docker run -d --name flower-api -p 8000:8000 flower-classification:latest
        echo "Waiting for service to be ready..."
        for i in {1..45}; do
          if curl -sf http://localhost:8000/health > /dev/null; then
            echo "Service is up"; break; fi; sleep 2; done
        if ! curl -sf http://localhost:8000/health > /dev/null; then
          echo "Healthcheck failed after retries";
          docker ps -a || true;
          docker logs flower-api || true;
          docker rm -f flower-api || true;
          exit 56;
        fi
        curl -f http://localhost:8000/health
        docker logs flower-api
        docker rm -f flower-api